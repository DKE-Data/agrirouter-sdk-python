>>> private_key = ...	# store here your private key you get in AR UI during application creation
>>> public_key = ...	# store here your public key you get in AR UI during application creation
>>> application_id = "8c947a45-c57d-4fd2-affc-206e2sdg3a50"		# # store here your application id. You can find it in AR UI


>>> ########################################################
>>> # Authorization

>>> from agrirouter.auth.auth import Authorization
>>> from agrirouter.auth.parameters import AuthUrlParameter
>>> from agrirouter.auth.enums import ResponseType

>>> auth_params = AuthUrlParameter(application_id=application_id, response_type="onboard")
>>> auth_client = Authorization("QA", public_key=public_key, private_key=private_key)
>>> auth_url = auth_client.get_auth_request_url(auth_params)	# use this url to authorize the user as described at https://docs.my-agrirouter.com/agrirouter-interface-documentation/latest/integration/authorization.html#perform-authorization

>>> auth_result_url = ...	# the url the user was redirected after his authorization.
>>> auth_response = auth_client.extract_auth_response(auth_result_url) 	# auth_response containing the results of the auth process
>>> auth_client.verify_auth_response(auth_response, public_key)				# you may verify auth_response to ensure answer was from AR

>>> auth_response.is_successfull	# True if user accepted application, False if he rejected
True
>>> auth_response.is_valid	# Result of verification, if False, response was not validated by public key. Doesn't indicate was the auth successfull. Accessible only after response verifying
True

>>> # Get dict containing data from auth process you will use for futher communication.
>>> # If auth was rejected, contains {"error"} key.
>>> # If auth was accepted, contains {signature, state, token, credentials{account, expires, regcode}} keys
>>> # Even if response verifying was not processed or failed, the results will be returned. But in that case you act on your risk.
>>> auth_data = auth_response.get_auth_result()

{'credentials': {'account': '0ba223gh-cg3b-4te5-boc9-77ghcfn136a0',
                 'expires': '2021-09-23T16:08:43.888Z',
                 'regcode': '8eloz190fd'},
 'signature': 'SULf4QMWAfG4/EyT0rejkRfApnkJIOs4sxI5wxeB8TkIiv0MR6YFKw1tPIkM4lluZKHEIgr5WvM3b3op4I9TtEbzZf995R8GIlNP6yyP51TF/4vZMbka0q+2g1o0qw/yuDQcGz1RpOJWCuBOjMXu9quzGO8xvDW7LjrN+MA9rzJZYb1toNf51O0sdg21oLvrKrqvaErKcIoRJtTVJ51awOWMARDkGZahcRdWrZbdGUbQwIyKJQu4vH8+4ytlyXPSWEYwKE2VFoAjhzWsKODdRRxDbNNLWsW8sxKamdsPmOC8inHUFsFNoxLbwZEnKROm2s3OfKGYuibXOpXw==',
 'state': '46c81f94-d117-4658-9a38-a85692448219',
 'token': 'eyJhY2sdoT4IjoiMGJhMjRlZWUtYzMwYi00N2U1LWJkYzktNzcwM2NmYjEzNmEwIiwicmVnY29kZSI6IjhlYWNiMTk4ZmMiLCJleHBpcmVzIopGjjAyMS0wOS0y1O5xNjowODo0My44ODhaIn0='}



>>> ########################################################

>>> # Onboarding


>>> from agrirouter.onboarding.onboarding import SoftwareOnboarding
>>> from agrirouter.onboarding.parameters import SoftwareOnboardingParameter
>>> from agrirouter.onboarding.enums import GateWays

>>> id_ = "mydeviceid"
>>> certification_version_id = ...	# get from AR UI
>>> utc_timestamp = "2018-06-20T07:29:23.457Z"
>>> time_zone = "+03:00"

>>> onboarding_client = SoftwareOnboarding("QA", public_key=public_key, private_key=private_key)
>>> onboarding_parameters = SoftwareOnboardingParameter(id_=id_, application_id=application_id, certification_version_id=certification_version_id, gateway_id=GateWays.REST.value, utc_timestamp=utc_timestamp, time_zone=time_zone, reg_code=auth_data["credentials"]["regcode"])
>>> onboarding_verifying_response = onboarding_client.verify(onboarding_parameters)
>>> onboarding_response = onboarding_client.onboard(onboarding_parameters)
>>> onboarding_response.status_code()
>>> onboarding_response.data()		# or onboarding_response.text()

{
  "authentication": {
    "certificate": "-----BEGIN ENCRYPTED PRIVATE KEY-----\n...\n-----END ENCRYPTED PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
    "secret": "77R8cjOGi9yTCBt2",
    "type": "PEM"
  },
  "capabilityAlternateId": "7bc8ab05-a0de-40db-a259-7deefb1265e9",
  "connectionCriteria": {
    "gatewayId": "3",
    "measures": "https://dke-qa.eu10.cp.iot.sap/iot/gateway/rest/measures/c067272a-d3a7-4dcf-ab58-5c45ba66ad60",
    "commands": "https://dke-qa.eu10.cp.iot.sap/iot/gateway/rest/commands/c067272a-d3a7-4dcf-ab58-5c45ba66ad60"
  },
  "deviceAlternateId": "c067272a-d3a7-4dcf-ab58-5c45ba66ad60",
  "sensorAlternateId": "5564ce96-385f-448a-9502-9ea3c940a259"
}