
public_key = "-----BEGIN PUBLIC KEY-----\n" \
             "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvFlVFgYRIkGL6Ay/av2e\n" \
             "S2yIag7XHRWFgVFewPegFyWjUQPSe5t2unrNOUu6Ucp7/ck/Ivm4c/6g39fDDzmq\n" \
             "i4JU8OfMpVbUxpiJSGa/OSiXnDuWkJyjdac/C8ip0EpOCFjAWdE+pnGhDny1XAwp\n" \
             "i4t0/WtO8U+IOYtjxpyyOp3daX97C7ihM1I6eOecVN6Caz9B38EnPg12UGA5NkZO\n" \
             "pnz4BHMwYUZqgxaeOPlh4MquAnF5fdjOV3TkmFWkbP1un3BJkU6owcadbjN5DQCG\n" \
             "jguFzX8VVfJEgn2VtIFbbhqsRivvNDmWst1XNZ0GRpviFFQRymz1WroV0lB9P9vK\n" \
             "mwIDAQAB\n" \
             "-----END PUBLIC KEY-----"

private_key = "-----BEGIN PRIVATE KEY-----\n" \
                        "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC8WVUWBhEiQYvo\n" \
                        "DL9q/Z5LbIhqDtcdFYWBUV7A96AXJaNRA9J7m3a6es05S7pRynv9yT8i+bhz/qDf\n" \
                        "18MPOaqLglTw58ylVtTGmIlIZr85KJecO5aQnKN1pz8LyKnQSk4IWMBZ0T6mcaEO\n" \
                        "fLVcDCmLi3T9a07xT4g5i2PGnLI6nd1pf3sLuKEzUjp455xU3oJrP0HfwSc+DXZQ\n" \
                        "YDk2Rk6mfPgEczBhRmqDFp44+WHgyq4CcXl92M5XdOSYVaRs/W6fcEmRTqjBxp1u\n" \
                        "M3kNAIaOC4XNfxVV8kSCfZW0gVtuGqxGK+80OZay3Vc1nQZGm+IUVBHKbPVauhXS\n" \
                        "UH0/28qbAgMBAAECggEANVX8vMBaEL/L/RnDCOqp7UTeOl5adx91j2G5+d4FhRiA\n" \
                        "73usGpmzHOqSe/OgXvH+e6cGDIL3w00rREgGsiSL0XbGU/PoJTf6CAUA9zI1W1vN\n" \
                        "1w2evPPGbBZAybb4s4WfJEjxq12QJrUNvRr+hoLhLuV+axb8o2P4uQbqab9Mz0ER\n" \
                        "lczCbHi4VDs1fwmNR3o47T1J4Qffzv1nMlor3pSrDzRDebic7/DC5JFkYZNGUtHk\n" \
                        "jKDF5Uv7Vzxgb4Of+i3JA5mRMqvG33pdenvvetwl9X69WOiC29bVlymSHyybBE4A\n" \
                        "ItfCAHIiY3nUL7UqzoIXpsyPs3ftkiy3Hn7isVSpLQKBgQDjadkGlqIgXCKZ8RS6\n" \
                        "a4iLTTTlh8Ur+vMrejBLPul1oxz2dRWZy8zykfNN2MPz7q2xT8wXGuxgj+jei/fi\n" \
                        "Gk08+UudMhV5Dtshb3fFq0NFCBe1ZUEX/wAcKC4Ed9xuuHpe7HOKAG0AsnzS8MPC\n" \
                        "lcMiL1/vz0GuRbsiyMY6hXweZQKBgQDUBmQNqOBWDTQkO/8MFHopo6Ju9iNvZ4fC\n" \
                        "u4SWqL+5BO3nnQHAQyslsj8FNilqhgMI+zaFFbZMZPv5opBSaAR0CQanKxMe3c9I\n" \
                        "XYkAJH2+M0fpp80LtxwShD411UDhIypzumfKe8vUXRW/8TWfl6VidfEVjxw6Rc2D\n" \
                        "g9btI4k0/wKBgQC42plnGZq/4yTdLXJD9pUPZrrQuQQ1M8/mT3RiNclfri8kxxe/\n" \
                        "5EG8C5dSeBkQd7sInmyve1sZQuFvxSbBy89s+NfV95gsxz6odwtMymHsAyACe0Pm\n" \
                        "VYmpWZ/OUgAEoEAYWOuyCZaRMoT0knEOAt6TMx8wt7AUEOqE497+QvMZYQKBgQC6\n" \
                        "ARlJenvEQjUaDKBFYrmBShK4MasIktThG0zINyZrFE35wR3GI6b4nRT4Z3mSABst\n" \
                        "h+Vef5u8DWOYrurZwHMXsMtrYDiX/ZNZMuV7gIfnkmlmLFWQD4XLIMTKyVjvqcAW\n" \
                        "YtOnKU+58CeiieO3LHxkkn97oF7tKEuRMtock+5M1QKBgC2fquqxXMrBEIoMGCZs\n" \
                        "ooU5V9gOjFVKC52VWnTNgmOWTqgZuqxPJtCTN5wPvhOSggQuHPwBHa9ioshJ0dGE\n" \
                        "6jdxGaJjAc82q2KZu9VEqoH/Xa2aS8dPEHwfJtzUVTia6WkrFtMFNaDMFd6byWDQ\n" \
                        "ai+T4i2J3/SDL0BfsFWdQuje\n" \
                        "-----END PRIVATE KEY-----"


>>> private_key = ...	# store here your private key you get in AR UI during application creation
>>> public_key = ...	# store here your public key you get in AR UI during application creation
>>> application_id = "8c947a45-c57d-4fd2-affc-206e2sdg3a50"		# # store here your application id. You can find it in AR UI


>>> ########################################################
>>> # Authorization

>>> import agrirouter as ar

>>> auth_params = ar.AuthUrlParameter(application_id=application_id, response_type="onboard")
>>> auth_client = ar.Authorization("QA", public_key=public_key, private_key=private_key)
>>> auth_url = auth_client.get_auth_request_url(auth_params)	# use this url to authorize the user as described at https://docs.my-agrirouter.com/agrirouter-interface-documentation/latest/integration/authorization.html#perform-authorization

>>> auth_result_url = ...	# the url the user was redirected to after his authorization.
>>> auth_response = auth_client.extract_auth_response(auth_result_url) 	# auth_response contains the results of the auth process
>>> auth_client.verify_auth_response(auth_response)				# you may verify auth_response to ensure answer was from AR

>>> auth_response.is_successful	# True if user accepted application, False if he rejected
True
>>> auth_response.is_valid	# Result of verification, if False, response was not validated by public key. Doesn't indicate the auth was successfull. Accessible only after response verifying
True

>>> # Get dict containing data from auth process you will use for futher communication.
>>> # If auth was rejected, contains {"error"} key.
>>> # If auth was accepted, contains {signature, state, token, credentials{account, expires, regcode}} keys
>>> # Even if response verifying was not processed or failed, the results will be returned. But in that case you act on your risk.
>>> auth_data = auth_response.get_auth_result()

{'credentials': {'account': '0ba223gh-cg3b-4te5-boc9-77ghcfn136a0',
                 'expires': '2021-09-23T16:08:43.888Z',
                 'regcode': '8eloz190fd'},
 'signature': 'SULf4QMWAfG4/EyT0rejkRfApnkJIOs4sxI5wxeB8TkIiv0MR6YFKw1tPIkM4lluZKHEIgr5WvM3b3op4I9TtEbzZf995R8GIlNP6yyP51TF/4vZMbka0q+2g1o0qw/yuDQcGz1RpOJWCuBOjMXu9quzGO8xvDW7LjrN+MA9rzJZYb1toNf51O0sdg21oLvrKrqvaErKcIoRJtTVJ51awOWMARDkGZahcRdWrZbdGUbQwIyKJQu4vH8+4ytlyXPSWEYwKE2VFoAjhzWsKODdRRxDbNNLWsW8sxKamdsPmOC8inHUFsFNoxLbwZEnKROm2s3OfKGYuibXOpXw==',
 'state': '46c81f94-d117-4658-9a38-a85692448219',
 'token': 'eyJhY2sdoT4IjoiMGJhMjRlZWUtYzMwYi00N2U1LWJkYzktNzcwM2NmYjEzNmEwIiwicmVnY29kZSI6IjhlYWNiMTk4ZmMiLCJleHBpcmVzIopGjjAyMS0wOS0y1O5xNjowODo0My44ODhaIn0='}



>>> ########################################################

>>> # Onboarding


>>> from agrirouter.onboarding.enums import GateWays

>>> id_ = "mydeviceid"
>>> certification_version_id = ...	# get from AR UI
>>> time_zone = "+03:00"

>>> onboarding_client = ar.SoftwareOnboarding("QA", public_key=public_key, private_key=private_key)
>>> onboarding_parameters = ar.SoftwareOnboardingParameter(id_=id_, application_id=application_id, certification_version_id=certification_version_id, gateway_id=GateWays.REST.value, time_zone=time_zone, reg_code=auth_data["credentials"]["regcode"])
>>> onboarding_verifying_response = onboarding_client.verify(onboarding_parameters)
>>> onboarding_verifying_response.status_code
>>> onboarding_verifying_response.text
>>> onboarding_response = onboarding_client.onboard(onboarding_parameters)
>>> onboarding_response.status_code
>>> onboarding_response.text

{
  "authentication": {
    "certificate": "-----BEGIN ENCRYPTED PRIVATE KEY-----\n...\n-----END ENCRYPTED PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
    "secret": "77R8cjOGi9yTCBt2",
    "type": "PEM"
  },
  "capabilityAlternateId": "7bc8ab05-a0de-40db-a259-7deefb1265e9",
  "connectionCriteria": {
    "gatewayId": "3",
    "measures": "https://dke-qa.eu10.cp.iot.sap/iot/gateway/rest/measures/c067272a-d3a7-4dcf-ab58-5c45ba66ad60",
    "commands": "https://dke-qa.eu10.cp.iot.sap/iot/gateway/rest/commands/c067272a-d3a7-4dcf-ab58-5c45ba66ad60"
  },
  "deviceAlternateId": "c067272a-d3a7-4dcf-ab58-5c45ba66ad60",
  "sensorAlternateId": "5564ce96-385f-448a-9502-9ea3c940a259"
}


>>> ##########################
>>> Messaging


>>> client = HttpClient(lambda x: x)
>>> messaging_service = HttpMessagingService(client)
>>> list_endpoint_parameters = ListEndpointsParameters(
        technical_message_type=CapabilityTypeDefinitions.ISO_11783_TASKDATA_ZIP.value,
        direction=2,
        filtered=False,
        onboarding_response=onboarding_response,
        application_message_id=new_uuid(),
        application_message_seq_no=1,
    )
>>> list_endpoint_service = ListEndpointsService(messaging_service)
>>> list_endpoint_service.send(list_endpoint_parameters)
